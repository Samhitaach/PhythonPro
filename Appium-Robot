
*** Settings ***
Library    AppiumLibrary

*** Variables ***
${ANDROID_AUTOMATION_NAME}    UIAutomator2
${ANDROID_APP}                ${CURDIR}/demoapp/ApiDemos-debug.apk
${ANDROID_PLATFORM_NAME}      Android
${ANDROID_PLATFORM_VERSION}   11

*** Test Cases ***
Should send keys to search box and then check the value
    Open Test Application
    Input Search Query    Hello World!
    Submit Search
    Search Query Should Be Matching    Hello World!

*** Keywords ***
Open Test Application
    Open Application    http://127.0.0.1:4723/wd/hub    automationName=${ANDROID_AUTOMATION_NAME}    platformName=${ANDROID_PLATFORM_NAME}    platformVersion=${ANDROID_PLATFORM_VERSION}    app=${ANDROID_APP}    appPackage=io.appium.android.apis    appActivity=.app.SearchInvoke

Input Search Query
    [Arguments]    ${query}
    Input Text    txt_query_prefill    ${query}

Submit Search
    Click Element    btn_start_search

Search Query Should Be Matching
    [Arguments]    ${text}
    Wait Until Page Contains Element    android:id/search_src_text
    Element Text Should Be    android:id/search_src_text    ${text}
Explanation
This example opens an Android demo app using AppiumLibrary.

It inputs text into a search box, submits the search, and verifies the search text.

Keywords encapsulate operations like opening the app, inputting text, clicking buttons, and asserting the UI.

AppiumLibrary uses Appium server URL to connect and control the mobile device or emulator.

Variables are defined for app details, platform, and automation technology.

Usage Notes
Ensure Appium server is running on the specified URL.

The real device or emulator with Android 11 is set up.

The demo app ApiDemos-debug.apk is used for practice and learning.

*** Settings ***
Library    AppiumLibrary

*** Variables ***
${APPIUM_SERVER}    http://127.0.0.1:4723/wd/hub
${PLATFORM_NAME}    Android
${PLATFORM_VERSION}    11
${DEVICE_NAME}    emulator-5554
${APP}    path/to/your/app.apk
${APP_PACKAGE}    com.example.android
${APP_ACTIVITY}    .MainActivity

*** Test Cases ***
Open App And Verify Title
    Open Application    ${APPIUM_SERVER}    platformName=${PLATFORM_NAME}    platformVersion=${PLATFORM_VERSION}    deviceName=${DEVICE_NAME}    app=${APP}    appPackage=${APP_PACKAGE}    appActivity=${APP_ACTIVITY}
    Wait Until Page Contains Element    id=com.example.android:id/title
    Element Text Should Be    id=com.example.android:id/title    Welcome
    [Teardown]    Close Application

Click Button And Check Result
    Open Application    ${APPIUM_SERVER}    platformName=${PLATFORM_NAME}    platformVersion=${PLATFORM_VERSION}    deviceName=${DEVICE_NAME}    app=${APP}    appPackage=${APP_PACKAGE}    appActivity=${APP_ACTIVITY}
    Click Element    id=com.example.android:id/button_start
    Wait Until Page Contains    Started
    [Teardown]    Close Application

*** Keywords ***
Swipe Vertically
    [Arguments]    ${start_y}    ${end_y}    ${duration}=1000
    ${width}=    Get Window Size    width
    ${height}=    Get Window Size    height
    ${center_x}=    Evaluate    ${width} / 2
    Swipe    ${center_x}    ${start_y}    ${center_x}    ${end_y}    ${duration}
Summary
Use built-in Swipe, Tap, and Scroll keywords for common gestures.

import subprocess

def validate_media_format(filepath, expected_format):
    cmd = ['ffprobe', '-v', 'error', '-show_entries', 'format=format_name', '-of', 'default=noprint_wrappers=1:nokey=1', filepath]
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
    actual_format = result.stdout.strip()
    return actual_format == expected_format
*** Settings ***
Library    Process

*** Keywords ***
Validate Media Format
    [Arguments]    ${filepath}    ${expected_format}
    ${result}    Run Process    python3    -c    import your_media_validator; print(your_media_validator.validate_media_format('${filepath}', '${expected_format}'))
    Should Be True    '${result.stdout.strip()}' == 'True'
Robot's Process or Python library) to validate the file format using libraries like ffprobe (from ffmpeg) or mutagen.
